import glob
import pandas as pd
import os
#configfile: '../shared/config.yaml'
include: "../shared/Snakefile"

threshold_str = config['thresh']
threshold_list = config['thresh_list']
script_path = workflow.basedir

rule create_summary_table:
    input:
        meta_table = "{output_path}/{project}/DESeq2/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        script_file = os.path.join(script_path, "scripts/create_summary_table.py")
    output:
        summary_table = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2.tsv",
        summary_table_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_INFO.tsv",
        summary_table_complement = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_complement.tsv",
        summary_table_complement_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_complement_INFO.tsv",
    conda:
        "envs/pandas.yaml"
    threads:  # although no threads are applied, limit the process since the table creations needs a lot of ram
        5
    log:
        "{output_path}/{project}/DESeq2/logs/create_summary_table/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/create_summary_table.py"

rule create_deseq_output:
    input:
        summary_table = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2.tsv",
        summary_table_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_INFO.tsv",
        R_path = os.path.join(script_path, "resources/DESeq2_diffexp_multifactor.R"),
        script_file = os.path.join(script_path, "scripts/create_deseq_output.py")
    output:
        #summary_out = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_results_summary.tsv",
        deseq_counts = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/DESeq2_heatmap_log2f{in_de}CREASE_{count_type}_counts.tsv", in_de=['IN', 'DE'], count_type=['nt', 'raw', 'norm', 'vsd']),
        results = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/DESeq2_log2f{in_de}CREASE_result.tsv", in_de=['IN', 'DE']),
        # TODO, change the deseq script to give homogen heatmap names
        heatmaps = report(expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/DESeq2_heatmap_log2f{in_de}CREASE_{count_type}_counts.pdf", in_de=['IN', 'DE'], count_type=['nt', 'raw', 'norm', 'vsd']), category="DESeq2", subcategory = "{project}-{gender}-heatmaps"),
    conda:
        "envs/DESeq2.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/create_deseq_output/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/create_deseq_output.py"

rule create_deseq_lifeline_plots:
    """
    the heatmaps are based on the DESeq2 results, which are ordered log2fold
    wise and filtered for adj_pvalue < 0.05
    lifelineplots are created for the first (max) 60 (either increasing or
    decreasing) ENSGs found
    take those ENSGs provided in the tables:
    # the ENSGs available are provided through the module
    # create_deseq_lifeline_plots.py, by reading the
    # f'DESeq2_heatmap_log2f{in_de}CREASE_{count_type}_counts.tsv tables
    in the validation and evaluation steps, those plots are called "base_plot"
    """
    input:
        meta_table = "{output_path}/{project}/DESeq2/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        summary_table_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_INFO.tsv",
        deseq_counts = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_heatmap_log2f{in_de}CREASE_{count_type}_counts.tsv",
        deseq_result = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_log2f{in_de}CREASE_result.tsv",
        script_file = os.path.join(script_path, "scripts/create_deseq_lifeline_plots.py")
    output:
        deseq_lifeline_pdf = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline.pdf",
        deseq_lifeline_tsv = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline.tsv.gz",
        #deseq_inc_lifeline = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_heatmap_log2fINCREASE_{count_type}_{ENSG}_lifeline.pdf",
    #params:
        #deseq_result = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_heatmap_log2f{in_de}CREASE_norm_result.tsv",
    conda:
        "envs/lifelines.yaml"
    log:
        "{output_path}/{project}/DESeq2/logs/create_deseq_lifeline_plots/{drug_combi}_{gender}_{cutoff}_{threshold}_{in_de}CREASE_{count_type}_{ENSG}.log",
    script:
        "scripts/create_deseq_lifeline_plots.py"

rule merge_summaries:
    """
    the lifeline validation should be done on every case available, regardless of the therapy, therefore 
    concat the deseq2 inputs summary  and summary complements:
    """
    input:
        summary_table = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2.tsv",
        summary_table_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_INFO.tsv",
        summary_table_complement = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_complement.tsv",
        summary_table_complement_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_DESeq2_complement_INFO.tsv",
        script_file = os.path.join(script_path, "scripts/merge_summaries.py")
    output:
        summary_table_both = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_counts.tsv",
        summary_table_both_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_counts_INFO.tsv",
    conda:
        "envs/pandas.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/create_counts_all_cases/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/merge_summaries.py"

rule create_counts_all_cases:
    """
    similar to the metilene validation, check the influence of the therapy on
    the whole set of cases, separated by the median in UP and DOWN of the
    counts, for each found ENSG:
    - we do not have normalized count data for every case, just the cases we put into the deseq analysis
    - to achive that, we can use DESeq2 again, without the actual DE analyse:
    ## Create DESeq2Dataset object
    dds <- DESeqDataSetFromMatrix(countData = data, colData = meta, design = ~ sampletype)
    View(counts(dds))
    dds <- estimateSizeFactors(dds)
    sizeFactors(dds)
    normalized_counts <- counts(dds, normalized=TRUE)
    write.table(normalized_counts, file="data/normalized_counts.txt", sep="\t", quote=F, col.names=NA)
    """
    input:
        summary_table_both = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_counts.tsv",
        summary_table_both_info = "{output_path}/{project}/DESeq2/DESeq2_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_counts_INFO.tsv",
        R_path = os.path.join(script_path, "resources/DESeq2_create_counts_all_cases.R"),
        script_file = os.path.join(script_path, "scripts/create_counts_all_cases.py")
    output:
        deseq_counts = temp(expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/DESeq2_{count_type}_counts_all_cases.tsv",  count_type=['nt', 'raw', 'norm', 'vsd'])),
    conda:
        "envs/DESeq2.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/create_counts_all_cases/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/create_counts_all_cases.py"

rule gzip_counts_all_cases:
    input:
        "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_{count_type}_counts_all_cases.tsv",  
    output:
        "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_{count_type}_counts_all_cases.tsv.gz",
    conda:
        "envs/gzip.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/gzip_counts_all_cases/{drug_combi}_{gender}_{cutoff}_{count_type}.log",
    shell:
        "cat {input} | gzip > {output} 2> {log}"

rule create_deseq_lifeline_validation:
    """
                                                      |     ENSG     |      
                                                      |--------------|
                                                      |              | 
                                                      |     ja       |
                                                      |   /    \     |
                                    in therapy? ----- |--        KM  |   
                                   /                  |   \    /     |
                               hoch  ca. 50%          |    nein      |
                              /      |                |              |
    - KP including every case:  --- mean of medians   |              |
                              \      |                |              |
                               tief  ca. 50%          |     ja       |
                                   \                  |   /    \     |
                                    in therapy? ----- |--        KM  |   
                                                      |   \    /     |   
                                                      |    nein      |
    """
    input:
        meta_table = "{output_path}/{project}/DESeq2/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        deseq_lifeline_tsv = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline.tsv.gz",
        counts = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/DESeq2_{count_type}_counts_all_cases.tsv.gz",
        script_file = os.path.join(script_path, "scripts/create_deseq_lifeline_plots_validation.py"),
    output:
        deseq_lifeline_tsv_UP = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_UP_val.tsv.gz",
        deseq_lifeline_tsv_DOWN = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_DOWN_val.tsv.gz",
        deseq_lifeline_pdf_UP = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_UP_val.pdf",
        deseq_lifeline_pdf_DOWN = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_DOWN_val.pdf",
        dropped_cases = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_dropped_cases.tsv",
    conda:
        "envs/lifelines.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/create_deseq_lifeline_validation/{drug_combi}_{gender}_{cutoff}_{threshold}_{in_de}_{count_type}_{ENSG}.log",
    script:
        "scripts/create_deseq_lifeline_plots_validation.py"

def get_lifeline_all(wildcards):
    """
    those sigle tables shall be returned:
        base_plot:
        deseq_lifeline_tsv = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline.tsv",
        validation_plots:
        deseq_lifeline_tsv_UP = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_UP_val.tsv",
        deseq_lifeline_tsv_DOWN = "{output_path}/{project}/DESeq2/DESeq2_output/{drug_combi}/{gender}/{cutoff}/{threshold}/DESeq2_log2f_{in_de}CREASE_{count_type}_{ENSG}_lifeline_DOWN_val.tsv",
    # the thresholds are merged, explicitly naming them via wildcards is not possible, glob them
    """
    output_path = wildcards.output_path
    project = wildcards.project
    drug_combi = wildcards.drug_combi
    gender = wildcards.gender
    cutoff = wildcards.cutoff
    # the glob is still necessary but just include applied thresholds within the dynamic/thresholds.txt file.
    search_result = []
    for thresh in threshold_list:
        search_result = search_result + glob.glob(os.path.join(output_path, project, "DESeq2/DESeq2_output", drug_combi, gender, cutoff, f'{thresh}/DESeq2_log2f_*lifeline*.tsv.gz' ))
    return search_result

rule aggregate_lifelines_all:
    """
    all expected ENSG which should be available can be gathered through the 
    DESeq2_log2fDECREASE_result.tsv 
    DESeq2_log2fINCREASE_result.tsv
    tables which must be available after issuing the first Snakefile
    -> at max those tables have 60 rows each
    # aggregation also over threshold
    # the count_type is a col within deseq_lifeline_aggregated and can be used
    # in the following evaluation and diff steps
    """
    input:
        # not using a input fct, we rather expand here the thresholds which should be aggregated explicitly, with that its still possible to get different aggregated results for different threshold combinations:
        # so the threshold inclusion depends on the interface threshold input in each single run
        lifeline_all = get_lifeline_all, # first lifeline plots with therapy set invoked and validation plot for UP and for DOWN regulated expressions
        # the results are not needed within the aggregate_lifelines_all.py script, but shall be a precondition to run this rule
        deseq_results = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/DESeq2_log2f{in_de}CREASE_result.tsv", in_de=['IN', 'DE']),
        script_file = os.path.join(script_path, "scripts/aggregate_lifelines_all.py")
    output:
        deseq_lifeline_aggregated = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/{threshold_str}/DESeq2_lifelines_aggregated.{{end}}", threshold_str=threshold_str),
        #deseq_lifeline_aggregated = "/scr/DESeq2_heatmap_log2fDECREASE_raw_counts_aggregated.tsv",
    conda:
        "envs/pandas.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/aggregate_lifelines_all/{drug_combi}_{gender}_{cutoff}_{end}.log",
    script:
        "scripts/aggregate_lifelines_all.py"

rule evaluate_lifelines_all:
    """
    the evaluation is done count_type specific and not count_type overlapping
    the specific count_type is ovarhanded through the given wildcard
    """
    input:
        deseq_lifeline_aggregated = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/{threshold_str}/DESeq2_lifelines_aggregated.tsv.gz", threshold_str=threshold_str),
        script_file = os.path.join(script_path, "scripts/evaluate_lifelines_all.py")
    output:
        deseq_lifeline_eval = expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/{threshold_str}/DESeq2_lifelines_evaluated-{{count_type}}.tsv.gz", threshold_str=threshold_str),
        deseq_lifeline_eval_pdfs = report(expand("{{output_path}}/{{project}}/DESeq2/DESeq2_output/{{drug_combi}}/{{gender}}/{{cutoff}}/{threshold_str}/DESeq2_lifelines_evaluated-{{count_type}}.pdf", threshold_str=threshold_str), category="DESeq2", subcategory = "{project}-{gender}-evalueated-kaplan-meier"),
        #deseq_lifeline_aggregated = "/scr/DESeq2_heatmap_log2fDECREASE_raw_counts_aggregated.tsv",
    conda:
        "envs/pandas_pypdf.yaml"
    threads:
        1
    log:
        "{output_path}/{project}/DESeq2/logs/evaluate_lifelines_all/{drug_combi}_{gender}_{cutoff}_{count_type}.log",
    script:
        "scripts/evaluate_lifelines_all.py"

