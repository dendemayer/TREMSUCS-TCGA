import os
import pandas as pd
import glob
#configfile: 'config.yaml'

include: "../shared/Snakefile"

#rule all:
#    input:
#        "/scr/dings/PEVO/NEW_downloads_3/TCGA-pipelines/TCGA-CESC_TCGA-HNSC/metilene/metilene_input_table/carboplatn,paclitaxel_cisplatin/male/cutoff_0/threshold_0/summary_for_metilene.tsv"
#breakpoint()
def get_data_files(wildcards):
    OUTPUT_PATH = wildcards[0]
    project = wildcards[1].split('_')
    DF_temp = pd.read_table(os.path.join(OUTPUT_PATH, 'metadata', config['manifest_file'][0]))
    DF_temp.set_index('project_id').loc[project, 'filename'].str.contains('HumanMethylation450')
    DF_temp = DF_temp[DF_temp['filename'].str.contains(
        'HumanMethylation450')].set_index(
                'project_id').loc[project, 'filename']
    DF_temp = DF_temp.to_frame()
    DF_temp.reset_index(inplace=True)
    DF_temp['filepath'] = OUTPUT_PATH + '/' + DF_temp['project_id'] + '/metilene/'+ 'data_files' + '/' + DF_temp['filename']
    data_path_list = DF_temp['filepath'].to_list()
    return data_path_list


rule create_summary_table:
    """
    according to the flag composition the (projects, drugs) and the metadata
    given (dead/alive, female/male) create metilene input tables
    # every data file for the belonging project must be loaded, since not just
    # the selection of drugs is invoked, but also the complement
    """
    input:
        "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        get_data_files, 
    output:
        "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
        #"{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene_complement.tsv"
    conda:
        "../shared/envs/pandas_natsort.yaml"
    threads:  # although no threads are applied, limit the process since the table creations needs a lot of ram
        5
    script:
        "scripts/create_summary_table.py"

rule create_metilene_out:
    """
    # we do not use the conda metilene but use our provided bin and script:
    # the commands could be:
    metilene -m 3 -M 1000 -d 0.03 -a alive -b dead summary_for_metilene.tsv | sort -V -k1,1 -k2,2n > metilene_out_sorted.tsv
    perl metilene_output.pl -q metilene_out_sorted.tsv -a 'alive' -b 'dead' -c 3 -d 0.03
    # for both metilene and the filter script:
    -d	minimum mean methylation difference (>=) (default:0.1)
    # metilene specific:
    -M, --maxdist	Integer	300	The allowed nt distance between two CpGs within a DMR
    -m, --mincpgs	Integer	10	The minimum # of CpGs in a DMR
    # filter specific
    -c	minimum (>=) CpGs (default:10)
    {complement} can here either be just metilene or metilene_complement

    """
    input:
        "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
    output:
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_out_sorted.tsv", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.out", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.pdf", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.bedgraph", 
    conda:
        "envs/metilene.yaml"
    threads:
        10
    script:
        "scripts/create_metilene_out.py"

rule metilene_intersect_tables:
    """
    intersecting the qval.0.05.out tables (holding DMRs) with the beta value files with which the are created with
    """
    input:
        qval_out = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.out", 
        #meta_info = "{output_path}/{project}/metilene/merged_meta_files/meta_info_druglist_merged_drugs_combined.tsv",
        # is this actually needed?
        metilene_input = "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
    output:
        out_file = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv"
    conda:
        "envs/pandas_bedtools.yaml"
    script:
        "scripts/bed_intersect_metilene.py"

rule metilene_plot_DMR_regions:
    input:
        metilene_intersect = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv"
    output:
        range_box_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect_boxplot_beta_value_{range}.pdf",
        range_line_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect_lineplot_median_beta_value_{range}.pdf" 
    conda:
        "envs/seaborn_plot.yaml"
    script:
        "scripts/plot_DMR_regions.py"

rule metilene_DMR_lifeline_plots:
    input:
        metilene_intersect = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv",
        meta_table = "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
    output:
        lifeline_out_pdf = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{range}.pdf",
        lifeline_out_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{range}.tsv",
    conda:
        "envs/lifelines.yaml"
    script:
        "scripts/create_lifeline_plots.py"

#merge  the lifeline pdfs together:
def get_plots_to_aggregate(wildcards):
    return glob.glob(f'{wildcards.output_path}/{wildcards.project}/metilene/metilene_output/{wildcards.drug_combi}/{wildcards.gender}/{wildcards.cutoff_and_or_threshold}/metilene_intersect_{wildcards.plot_type}_*.pdf')

rule merge_DMR_plots:
    input:
        get_plots_to_aggregate
    output:
        merged_pdf = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff_and_or_threshold}/metilene_merged_{plot_type}.pdf",
        #"metilene_intersect_[lifeline_plot]_{range}.pdf",  -> metilene_merged_{plot_type}.pdf
        #"metilene_intersect_[boxplot_beta_value]_{range}.pdf",  -> metilene_merged_{plot_type}.pdf
        #"metilene_intersect_[lineplot_median_beta_value]_{range}.pdf"   -> metilene_merged_{plot_type}.pdf
    conda:
        "envs/qpdf.yaml"
    shell:
        "qpdf --empty --pages {input} -- {output}"
        #qpdf --empty --pages Linux.pdf ShellIntro.pdf -- new.pdf

rule compare_background:
    """
    based on the found DMRs, check those DMRs for the following sets:
                                              |  initial DMR  |      
                                              |---------------|
                                              |               | 
                                              |     ja        |
                                              |   /    \      |
                                    cisplatin?|--        KM   |   
                                   /          |   \    /      |
                               hoch           |    nein       |
                              /               |               |
    - KP including every case:                |               |
                              \               |               |
                               tief           |     ja        |
                                   \          |   /    \      |
                                    cisplatin?|--        KM   |   
                                              |   \    /      |   
                                              |    nein       |

    - the initial DMR KM plot groups beta value UP and DOWN for treated cases
    - the two validation KM plots groups treated vs untreated 

    """
    input:
        metilene_intersect = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv",
        meta_table = "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
    output:
        # /scr/dings/PEVO/NEW_downloads_3/TCGA-pipelines_3/TCGA-CESC_TCGA-HNSC/metilene/metilene_output/carboplatin_carboplatin,paclitaxel_cisplatin/female_male/cutoff_2/threshold_10/metilene_intersect_lifeline_DOWN_val_plot_chr8_140238482_140238568.pdf
        UP_val_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_UP_val_plot_{range}.pdf",
        UP_val_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_UP_val_plot_{range}.tsv",
        DOWN_val_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_DOWN_val_plot_{range}.pdf",
        DOWN_val_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_DOWN_val_plot_{range}.tsv",
    conda:
        "envs/lifelines.yaml"
    script:
        "scripts/create_lifeline_plots_validation.py"
