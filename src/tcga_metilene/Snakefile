import os
import pandas as pd
import glob
#configfile: 'config.yaml'

include: "../shared/Snakefile"

#rule all:
#    input:
#        "/scr/dings/PEVO/NEW_downloads_3/TCGA-pipelines/TCGA-CESC_TCGA-HNSC/metilene/metilene_input_table/carboplatn,paclitaxel_cisplatin/male/cutoff_0/threshold_0/summary_for_metilene.tsv"
#breakpoint()
def get_data_files(wildcards):
    OUTPUT_PATH = wildcards[0]
    project = wildcards[1].split('_')
    DF_temp = pd.read_table(os.path.join(OUTPUT_PATH, 'metadata', config['manifest_file'][0]))
    DF_temp.set_index('project_id').loc[project, 'filename'].str.contains('HumanMethylation450')
    DF_temp = DF_temp[DF_temp['filename'].str.contains(
        'HumanMethylation450')].set_index(
                'project_id').loc[project, 'filename']
    DF_temp = DF_temp.to_frame()
    DF_temp.reset_index(inplace=True)
    DF_temp['filepath'] = OUTPUT_PATH + '/' + DF_temp['project_id'] + '/metilene/'+ 'data_files' + '/' + DF_temp['filename']
    data_path_list = DF_temp['filepath'].to_list()
    return data_path_list

rule create_summary_table:
    """
    according to the flag composition the (projects, drugs) and the metadata
    given (dead/alive, female/male) create metilene input tables
    # every data file for the belonging project must be loaded, since not just
    # the selection of drugs is invoked, but also the complement
    """
    input:
        "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        get_data_files, 
    output:
        "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
        "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene_complement.tsv"
    conda:
        "../shared/envs/pandas_natsort.yaml"
    threads:  # although no threads are applied, limit the process since the table creations needs a lot of ram
        5
    log:
        "{output_path}/{project}/metilene/logs/create_summary_table/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/create_summary_table.py"

rule create_metilene_out:
    """
    # we do not use the conda metilene but use our provided bin and script:
    # the commands could be:
    metilene -m 3 -M 1000 -d 0.03 -a alive -b dead summary_for_metilene.tsv | sort -V -k1,1 -k2,2n > metilene_out_sorted.tsv
    perl metilene_output.pl -q metilene_out_sorted.tsv -a 'alive' -b 'dead' -c 3 -d 0.03
    # for both metilene and the filter script:
    -d	minimum mean methylation difference (>=) (default:0.1)
    # metilene specific:
    -M, --maxdist	Integer	300	The allowed nt distance between two CpGs within a DMR
    -m, --mincpgs	Integer	10	The minimum # of CpGs in a DMR
    # filter specific
    -c	minimum (>=) CpGs (default:10)
    {complement} can here either be just metilene or metilene_complement

    """
    input:
        "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
    output:
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_out_sorted.tsv", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.out", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.pdf", 
        "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.bedgraph", 
    conda:
        "envs/metilene.yaml"
    threads:
        10
    log:
        "{output_path}/{project}/metilene/logs/create_metilene_out/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/create_metilene_out.py"

rule metilene_intersect_tables:
    """
    intersecting the qval.0.05.out tables (holding DMRs) with the beta value files with which the are created with
    """
    input:
        qval_out = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_qval.0.05.out", 
        #meta_info = "{output_path}/{project}/metilene/merged_meta_files/meta_info_druglist_merged_drugs_combined.tsv",
        # is this actually needed?
        metilene_input = "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
    output:
        out_file = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv"
    conda:
        "envs/pandas_bedtools.yaml"
    log:
        "{output_path}/{project}/metilene/logs/metilene_intersect_tables/{drug_combi}_{gender}_{cutoff}.log",
    script:
        "scripts/bed_intersect_metilene.py"

rule metilene_plot_DMR_regions:
    input:
        metilene_intersect = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv"
    output:
        pdf_boxplot_out = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect_boxplot_beta_value_{DMR}.pdf",
        pdf_lineplot_out = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect_lineplot_median_beta_value_{DMR}.pdf" 
    conda:
        "envs/seaborn_plot.yaml"
    log:
        "{output_path}/{project}/metilene/logs/metilene_plot_DMR_regions/{drug_combi}_{gender}_{cutoff}_{DMR}.log",
    script:
        "scripts/plot_DMR_regions.py"

rule metilene_DMR_lifeline_plots:
    input:
        metilene_intersect = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv",
        meta_table = "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        script_file = "../tcga_metilene/scripts/create_lifeline_plots.py"
    output:
        lifeline_out_pdf = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}.pdf",
        lifeline_out_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}.tsv",
    wildcard_constraints:
        DMR=".*_.*_\d*"  # to avoid that output files with pattern #metilene_intersect_lifeline_plot_chr19_57351041_57351345_UP_val.pdf match this rule
                        # -> limit the wildcards to chrxy_start_end pattern, otherwise DMR could be interpreted as chr19_57351041_57351345_UP_val
    log:
        "{output_path}/{project}/metilene/logs/metilene_DMR_lifeline_plot/{drug_combi}_{gender}_{cutoff}_{threshold}_{DMR}.log"
    conda:
        "envs/lifelines.yaml"
    script:
        "scripts/create_lifeline_plots.py"


rule DMR_plot_validation:
    """
    based on the found DMRs, check those DMRs for the following sets:
                                               |  initial DMR  |      
                                               |---------------|
                                               |               | 
                                               |     ja        |
                                               |   /    \      |
                                    in therapy?|--        KM   |   
                                   /           |   \    /      |
                               hoch  50%       |    nein       |
                              /      |         |               |
    - KP including every case:  ---median      |               |
                              \      |         |               |
                               tief  50%       |     ja        |
                                   \           |   /    \      |
                                    in therapy?|--        KM   |   
                                               |   \    /      |   
                                               |    nein       |

    - the initial DMR KM plot groups beta value UP and DOWN for treated cases
    - the two validation KM plots groups treated vs untreated 

    """
    input:
        meta_table = "{output_path}/{project}/metilene/merged_meta_files/{cutoff}/meta_info_druglist_merged_drugs_combined.tsv",
        # this table holds the desired Start value:
        start_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}.tsv",
        # every betavalue available is hold by those two tables, filter on threshold withing validation script:
        summary = "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene.tsv",
        summary_complement = "{output_path}/{project}/metilene/metilene_input_table/{drug_combi}/{gender}/{cutoff}/summary_for_metilene_complement.tsv"
    output:
        UP_val_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}_UP_val.pdf",
        UP_val_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}_UP_val.tsv",
        DOWN_val_plot = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}_DOWN_val.pdf",
        DOWN_val_tsv = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/metilene_intersect_lifeline_plot_{DMR}_DOWN_val.tsv",
    conda:
        "envs/lifelines.yaml"
    log:
        "{output_path}/{project}/metilene/logs/DMR_plot_validation/{drug_combi}_{gender}_{cutoff}_{threshold}_{DMR}.log"
    script:
        "scripts/create_lifeline_plots_validation.py"

#merge  the lifeline pdfs together:

def get_plots_to_aggregate(wildcards):
    # before this input fct is required, it is already assured, that the
    # metilene_intersect tables are created and with that, the DMRs on which we
    # rely are known, 'tell' which DMR plots we expect:
    # - it's not sufficient to glob the wildcards, since it's not assured that those files are already created!
    path = os.path.join(wildcards[0], wildcards[1], 'metilene/metilene_output', wildcards[2], wildcards[3], wildcards[4], 'metilene_intersect.tsv')
    try:
        DMRs = pd.read_table(path,
                header=[0,1,2,3,4], index_col=[0,1,2,3],
                na_values='.').reset_index(
                        'region')['region'].value_counts().index.tolist()
    except Exception as e:
        "in case the intersect table is empty, like in CESC for male, "
        "return an empty list"
        print(e)
        print(f'{path} containts no DMRs, no merge plot can be created')
        return []
    beta_plots = sorted([path.replace('.tsv', '_boxplot_beta_value_' + dmr + '.pdf') for dmr in DMRs])
    line_plots = sorted([path.replace('.tsv', '_lineplot_median_beta_value_' + dmr + '.pdf') for dmr in DMRs])
    # wildcards[5] is the threshold which is invokened with the lifeline plot
    lifeline_template = os.path.join(wildcards[0], wildcards[1], 'metilene/metilene_output', wildcards[2], wildcards[3], wildcards[4], wildcards[5], 'metilene_intersect_lifeline_plot_')
    lifeline_plots = sorted([(lifeline_template + dmr + '.pdf') for dmr in DMRs])
    lifeline_plots_UP = sorted([(lifeline_template + dmr + '_UP_val.pdf') for dmr in DMRs])
    lifeline_plots_DOWN = sorted([(lifeline_template + dmr +'_DOWN_val.pdf') for dmr in DMRs])
    final_list = []
    for i,j,x,y,z in zip(beta_plots, line_plots, lifeline_plots, lifeline_plots_UP, lifeline_plots_DOWN):
        final_list.append(i)
        final_list.append(j)
        final_list.append(x)
        final_list.append(y)
        final_list.append(z)
    #print(f'merging {final_list}')
    return final_list
    #glob.glob(f'{wildcards.output_path}/{wildcards.project}/metilene/metilene_output/{wildcards.drug_combi}/{wildcards.gender}/{wildcards.cutoff_and_or_threshold}/metilene_intersect_{wildcards.plot_type}_*.pdf')

rule merge_DMR_plots:
    '''
    # we can provide 
    merging every plot which belongs to one DMR
    # the shell: directive would work, but the sorting is not preferable, so
    # using python to group every DMR kind together, also the complement plots:
    # here, we do not invoke pdf's to the merge which are to small (empty):
    qpdf --empty --pages $(find . -maxdepth 1 -type f -size +1k -iname '*intersect*pdf') -- all_plots_merged.pdf
    [Errno 7] Argument list too long: '/bin/sh'
    # avoid a too long argument list with invokening python pdf funcitonality,
    # do not use bash tools like qpdf or pdfcombine
    '''
    input:
        get_plots_to_aggregate, # with this input function, it is secured that the plots are created before merging
        intersect_file = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/metilene_intersect.tsv",
    output:
        All_plots_merged = "{output_path}/{project}/metilene/metilene_output/{drug_combi}/{gender}/{cutoff}/{threshold}/All_plots_merged.pdf",
    conda:
        "envs/pypdf.yaml"
    log:
        "{output_path}/{project}/metilene/logs/merge_DMR_plots/{drug_combi}_{gender}_{cutoff}_{threshold}.log"
    script:
        "scripts/merge_DMR_region_plots.py"
    #shell:
        #"qpdf --empty --pages {input} -- {output}"
        #qpdf --empty --pages Linux.pdf ShellIntro.pdf -- new.pdf
        #find . -maxdepth 1 -type f -size +1k -iname '*intersect*pdf'
